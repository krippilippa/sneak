{"version":3,"mappings":"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","names":["AgoraRTC","script","__vitePreload","module","AgoraRTCModule","sdkLoaded","client","localAudioTrack","localVideoTrack","appId","channel","token","uid","waitForSDK","checkSDK","startBasicLiveStreaming","initializeClient","setupEventListeners","user","mediaType","displayRemoteVideo","remotePlayerContainer","createLocalTracks","displayLocalVideo","localPlayerContainer","joinAsHost","publishLocalTracks","disableJoinButtons","error","joinAsAudience","clientRoleOptions","leaveChannel","playerContainer","enableJoinButtons","setupButtonHandlers","hostButton","audienceButton","leaveButton","event"],"ignoreList":[],"sources":["../../src/agora-rtc-sdk.js","../../src/main.js"],"sourcesContent":["// This file is a wrapper to ensure proper import in production\n// Use AgoraRTC from node_modules in development, or from CDN in production\nlet AgoraRTC;\n\n// Check if we're running on GitHub Pages (look for '/sneak/' in the path)\nif (window.location.href.includes('/sneak/') && !window.location.href.includes('localhost')) {\n    // We're on GitHub Pages - use CDN\n    const script = document.createElement('script');\n    script.src = 'https://download.agora.io/sdk/release/AgoraRTC_N-4.23.2.js';\n    script.async = false;\n    document.head.appendChild(script);\n    \n    // Wait for script to load\n    script.onload = () => {\n        console.log('Agora SDK loaded from CDN');\n        AgoraRTC = window.AgoraRTC;\n    };\n} else {\n    // We're in development - use npm package\n    import('agora-rtc-sdk-ng').then(module => {\n        AgoraRTC = module.default;\n        console.log('Agora SDK loaded from npm');\n    });\n}\n\nexport default AgoraRTC; ","// Import the Agora SDK without using the alias\nimport AgoraRTCModule from './agora-rtc-sdk.js'\n\n// Wait for SDK to be loaded before initializing\nlet AgoraRTC = null;\nlet sdkLoaded = false;\n\n// RTC client instance\nlet client = null\n\n// Declare variables for local tracks\nlet localAudioTrack = null\nlet localVideoTrack = null\n\n// Connection parameters\nlet appId = import.meta.env.VITE_AGORA_APP_ID || \"fbb5b55989034029abac412d655d05ae\" // Fallback to hardcoded ID for demo\nlet channel = \"test\" // Consider making this configurable via UI\nlet token = null\nlet uid = 0 // User ID\n\n// Add debug info\nconsole.log(\"App ID used:\", appId ? \"From environment\" : \"Fallback value\");\nconsole.log(\"Current base URL: \", window.location.href);\n\n// Function to check if SDK is loaded\nfunction waitForSDK() {\n    console.log(\"Waiting for Agora SDK to load...\");\n    \n    // Check if SDK is loaded every 100ms\n    const checkSDK = setInterval(() => {\n        if (window.AgoraRTC || AgoraRTCModule) {\n            clearInterval(checkSDK);\n            AgoraRTC = window.AgoraRTC || AgoraRTCModule;\n            sdkLoaded = true;\n            console.log(\"Agora SDK loaded successfully\");\n            startBasicLiveStreaming();\n        }\n    }, 100);\n    \n    // Timeout after 10 seconds\n    setTimeout(() => {\n        if (!sdkLoaded) {\n            clearInterval(checkSDK);\n            console.error(\"Failed to load Agora SDK within timeout period\");\n            alert(\"Failed to load Agora SDK. Please check your connection and try again.\");\n        }\n    }, 10000);\n}\n\n// Initialize the AgoraRTC client\nfunction initializeClient() {\n    console.log(\"Initializing AgoraRTC client\");\n    if (!AgoraRTC) {\n        console.error(\"AgoraRTC is not loaded\");\n        return;\n    }\n    client = AgoraRTC.createClient({ mode: \"live\", codec: \"vp8\", role: \"host\" })\n    setupEventListeners()\n}\n\n// Handle client events\nfunction setupEventListeners() {\n    console.log(\"Setting up event listeners\");\n    client.on(\"user-published\", async (user, mediaType) => {\n        await client.subscribe(user, mediaType)\n        console.log(\"subscribe success\")\n        if (mediaType === \"video\") {\n            displayRemoteVideo(user)\n        }\n        if (mediaType === \"audio\") {\n            user.audioTrack.play()\n        }\n    })\n    client.on(\"user-unpublished\", async (user) => {\n        const remotePlayerContainer = document.getElementById(user.uid)\n        remotePlayerContainer && remotePlayerContainer.remove()\n    })\n}\n\n// Create and publish local tracks\nasync function createLocalTracks() {\n    console.log(\"Creating local tracks\");\n    localAudioTrack = await AgoraRTC.createMicrophoneAudioTrack()\n    localVideoTrack = await AgoraRTC.createCameraVideoTrack()\n}\n\n// Display local video\nfunction displayLocalVideo() {\n    console.log(\"Displaying local video\");\n    const localPlayerContainer = document.createElement(\"div\")\n    localPlayerContainer.id = uid\n    localPlayerContainer.textContent = `Local user ${uid}`\n    localPlayerContainer.style.width = \"640px\"\n    localPlayerContainer.style.height = \"480px\"\n    document.body.append(localPlayerContainer)\n    localVideoTrack.play(localPlayerContainer)\n}\n\n// Join as a host\nasync function joinAsHost() {\n    console.log(\"Join as host clicked\");\n    try {\n        await client.join(appId, channel, token, uid)\n        console.log(\"Successfully joined channel as host\");\n        // A host can both publish tracks and subscribe to tracks\n        client.setClientRole(\"host\")\n        // Create and publish local tracks\n        await createLocalTracks()\n        await publishLocalTracks()\n        displayLocalVideo()\n        disableJoinButtons()\n        console.log(\"Host joined and published tracks.\")\n    } catch (error) {\n        console.error(\"Error joining as host:\", error);\n    }\n}\n\n// Join as audience\nasync function joinAsAudience() {\n    console.log(\"Join as audience clicked\");\n    try {\n        await client.join(appId, channel, token, uid)\n        console.log(\"Successfully joined channel as audience\");\n        // Set ultra-low latency level\n        let clientRoleOptions = { level: 2 }\n        // Audience can only subscribe to tracks\n        client.setClientRole(\"audience\", clientRoleOptions)\n        disableJoinButtons()\n        console.log(\"Audience joined.\")\n    } catch (error) {\n        console.error(\"Error joining as audience:\", error);\n    }\n}\n\n// Publish local tracks\nasync function publishLocalTracks() {\n    console.log(\"Publishing local tracks\");\n    await client.publish([localAudioTrack, localVideoTrack])\n}\n\n// Display remote user's video\nfunction displayRemoteVideo(user) {\n    console.log(\"Displaying remote video for user:\", user.uid);\n    const remotePlayerContainer = document.createElement(\"div\")\n    remotePlayerContainer.id = user.uid.toString()\n    remotePlayerContainer.textContent = `Remote user ${user.uid}`\n    remotePlayerContainer.style.width = \"640px\"\n    remotePlayerContainer.style.height = \"480px\"\n    document.body.append(remotePlayerContainer)\n    user.videoTrack.play(remotePlayerContainer)\n}\n\n// Leave the channel\nasync function leaveChannel() {\n    console.log(\"Leave clicked\");\n    try {\n        if (localAudioTrack) {\n            localAudioTrack.close()\n            localAudioTrack = null\n        }\n        if (localVideoTrack) {\n            localVideoTrack.close()\n            localVideoTrack = null\n        }\n        const localPlayerContainer = document.getElementById(uid)\n        localPlayerContainer && localPlayerContainer.remove()\n        client.remoteUsers.forEach((user) => {\n            const playerContainer = document.getElementById(user.uid)\n            playerContainer && playerContainer.remove()\n        })\n        await client.leave()\n        enableJoinButtons()\n        console.log(\"Left the channel.\")\n    } catch (error) {\n        console.error(\"Error leaving channel:\", error);\n    }\n}\n\n// Disable join buttons\nfunction disableJoinButtons() {\n    document.getElementById(\"host-join\").disabled = true\n    document.getElementById(\"audience-join\").disabled = true\n}\n\n// Enable join buttons\nfunction enableJoinButtons() {\n    document.getElementById(\"host-join\").disabled = false\n    document.getElementById(\"audience-join\").disabled = false\n}\n\n// Set up event listeners for buttons\nfunction setupButtonHandlers() {\n    console.log(\"Setting up button handlers\");\n    \n    const hostButton = document.getElementById(\"host-join\");\n    const audienceButton = document.getElementById(\"audience-join\");\n    const leaveButton = document.getElementById(\"leave\");\n    \n    console.log(\"Host button found:\", Boolean(hostButton));\n    console.log(\"Audience button found:\", Boolean(audienceButton));\n    console.log(\"Leave button found:\", Boolean(leaveButton));\n    \n    if (hostButton) hostButton.onclick = joinAsHost;\n    if (audienceButton) audienceButton.onclick = joinAsAudience;\n    if (leaveButton) leaveButton.onclick = leaveChannel;\n    \n    // Add direct click listeners to debug\n    document.addEventListener('click', function(event) {\n        if (event.target && event.target.id === 'host-join') {\n            console.log('Host button clicked via event listener');\n        }\n        if (event.target && event.target.id === 'audience-join') {\n            console.log('Audience button clicked via event listener');\n        }\n        if (event.target && event.target.id === 'leave') {\n            console.log('Leave button clicked via event listener');\n        }\n    });\n}\n\n// Start live streaming\nfunction startBasicLiveStreaming() {\n    console.log(\"Starting basic live streaming\");\n    initializeClient();\n    \n    // Change from window.onload to addEventListener to avoid conflicts\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', setupButtonHandlers);\n    } else {\n        setupButtonHandlers();\n    }\n}\n\n// Start the application by waiting for SDK\nwaitForSDK();\n"],"file":"assets/index-CbceglWI.js"}